openapi: 3.0.3
info:
  title: DragonKillers
  description: DragonKillers
  version: 1.0.0
servers:
  - url: http
components:
  schemas:
    ErrorObject:
      type: object
      properties:
        message:
          type: string
    dragonId:
      type: integer
      format: int32
      nullable: false
      minimum: 0
      exclusiveMinimum: true
    dragonName:
      type: string
      minLength: 1
    dragonAge:
      type: integer
      format: int32
      nullable: true
    dragonDescription:
      type: string
    dragonSpeaking:
      type: boolean
    Color:
      type: string
      enum:
        - YELLOW
        - ORANGE
        - WHITE
        - BROWN
    DragonCaveDto:
      type: object
      nullable: true
      properties:
        numberOfTreasures:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
    CoordinatesDto:
      type: object
      properties:
        x:
          type: number
          format: double
          maximum: 476
        y:
          type: number
          format: float
          minimum: -486
          exclusiveMinimum: true
    DragonDto:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/dragonId"
        name:
          $ref: "#/components/schemas/dragonName"
        coordinates:
          $ref: "#/components/schemas/CoordinatesDto"
        creationDate:
          type: string
          format: date
        age:
          $ref: "#/components/schemas/dragonAge"
        description:
          $ref: "#/components/schemas/dragonDescription"
        speaking:
          $ref: "#/components/schemas/dragonSpeaking"
        color:
          $ref: "#/components/schemas/Color"
        cave:
          $ref: "#/components/schemas/DragonCaveDto"
    CreateDragonRequest:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/dragonName"
        coordinates:
          $ref: "#/components/schemas/CoordinatesDto"
        age:
          $ref: "#/components/schemas/dragonAge"
        description:
          $ref: "#/components/schemas/dragonDescription"
        speaking:
          $ref: "#/components/schemas/dragonSpeaking"
        color:
          $ref: "#/components/schemas/Color"
        cave:
          $ref: "#/components/schemas/DragonCaveDto"
      required:
        - name
        - coordinates
        - description
        - speaking
        - color
    UpdateDragonRequest:
      $ref: "#/components/schemas/CreateDragonRequest"
    count:
      type: integer
      minimum: 0
    DescriptionInfo:
      type: object
      properties:
        description:
          $ref: "#/components/schemas/dragonDescription"
        count:
          $ref: "#/components/schemas/count"
paths:
  /dragons:
    post:
      summary: Create dragon
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateDragonRequest"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DragonDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    get:
      summary: Get dragons
      parameters:
        - in: query
          name: pageNumber
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            format: int32
            default: 1
            minimum: 1
            maximum: 50
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: filterBy
          required: false
          schema:
            type: string
        - in: query
          name: filterOp
          required: false
          schema:
            type: string
            enum:
              - lw # <
              - le # <=
              - gr # >
              - ge # >=
              - eq # ==
              - ne # !=
        - in: query
          name: filterValue
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DragonDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /dragons/{id}:
    get:
      summary: Get dragon
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/dragonId"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DragonDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
        404:
          description: NOT FOUND
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    put:
      summary: Update dragon
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/dragonId"
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/UpdateDragonRequest"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DragonDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
        404:
          description: NOT FOUND
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    delete:
      summary: Delete dragon
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/dragonId"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DragonDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
        404:
          description: NOT FOUND
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /dragons/groupes/descriptions:
    get:
      summary: Group dragons by description, return number of dragons in each group
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DescriptionInfo"
  /dragons:countByColor:
    post:
      summary: Count dragons with given color
      parameters:
        - in: query
          name: color
          required: true
          schema:
            $ref: "#/components/schemas/Color"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/count"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /dragons:countWithGreaterCave:
    post:
      summary: Count dragons with cave greater then given
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/DragonCaveDto"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DragonDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
