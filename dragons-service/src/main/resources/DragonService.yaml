openapi: 3.0.3
info:
  title: Dragon service
  description: Service for managing collection of Dragons and for managing Killers teams
  version: 1.0.0
servers:
  - url: http://localhost
tags:
  - name: dragons
    description: Everything about your dragons
components:
  schemas:
    ErrorObject:
      type: object
      properties:
        message:
          type: string
    dragonId:
      type: integer
      format: int32
      minimum: 0
      exclusiveMinimum: true
    dragonName:
      type: string
      minLength: 1
    dragonAge:
      type: integer
      format: int32
      minimum: 0
      exclusiveMinimum: true
      nullable: true
    dragonDescription:
      type: string
    dragonSpeaking:
      type: boolean
    caveNumberOfTreasures:
      type: number
      format: float
      minimum: 0
      exclusiveMinimum: true
    Color:
      type: string
      enum:
        - YELLOW
        - ORANGE
        - WHITE
        - BROWN
    caveId:
      type: integer
      format: int32
    coordinatesX:
      type: number
      format: double
      maximum: 476
    coordinatesY:
      type: number
      format: float
      minimum: -486
      exclusiveMinimum: true
    DragonCaveDto:
      type: object
      nullable: true
      properties:
        id:
          $ref: "#/components/schemas/caveId"
        numberOfTreasures:
          $ref: "#/components/schemas/caveNumberOfTreasures"
    CreateDragonCave:
      type: object
      nullable: true
      properties:
        numberOfTreasures:
          $ref: "#/components/schemas/caveNumberOfTreasures"
      required:
        - numberOfTreasures
    CoordinatesDto:
      type: object
      properties:
        x:
          $ref: "#/components/schemas/coordinatesX"
        y:
          $ref: "#/components/schemas/coordinatesY"
    CreateCoordinates:
      type: object
      properties:
        x:
          $ref: "#/components/schemas/coordinatesX"
        y:
          $ref: "#/components/schemas/coordinatesY"
      required:
        - x
        - y
    DragonDto:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/dragonId"
        name:
          $ref: "#/components/schemas/dragonName"
        coordinates:
          $ref: "#/components/schemas/CoordinatesDto"
        creationDate:
          type: string
          format: date-time
        age:
          $ref: "#/components/schemas/dragonAge"
        description:
          $ref: "#/components/schemas/dragonDescription"
        speaking:
          $ref: "#/components/schemas/dragonSpeaking"
        color:
          $ref: "#/components/schemas/Color"
        cave:
          $ref: "#/components/schemas/DragonCaveDto"
    CreateDragonRequest:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/dragonName"
        coordinates:
          $ref: "#/components/schemas/CreateCoordinates"
        age:
          $ref: "#/components/schemas/dragonAge"
        description:
          $ref: "#/components/schemas/dragonDescription"
        speaking:
          $ref: "#/components/schemas/dragonSpeaking"
        color:
          $ref: "#/components/schemas/Color"
        cave:
          $ref: "#/components/schemas/CreateDragonCave"
      required:
        - name
        - coordinates
        - description
        - speaking
        - color
    DragonsList:
      type: object
      properties:
        dragons:
          type: array
          items:
            $ref: "#/components/schemas/DragonDto"
    UpdateDragonRequest:
      $ref: "#/components/schemas/CreateDragonRequest"
    count:
      type: integer
      minimum: 0
    DescriptionInfo:
      type: object
      properties:
        description:
          $ref: "#/components/schemas/dragonDescription"
        count:
          $ref: "#/components/schemas/count"
    killerTeamId:
      type: integer
    killerTeamName:
      type: string
      minLength: 1
    killerTeamSize:
      type: integer
      format: int32
      minimum: 1
    KillerTeamDto:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/killerTeamId"
        name:
          $ref: "#/components/schemas/killerTeamName"
        size:
          $ref: "#/components/schemas/killerTeamSize"
        caveId:
          $ref: "#/components/schemas/caveId"
    KillerTeamDtoList:
      type: object
      properties:
        teams:
          type: array
          items:
            $ref: "#/components/schemas/KillerTeamDto"
    GroupByDescriptionResponse:
      type: object
      properties:
        descriptions:
          type: array
          items:
            $ref: "#/components/schemas/DescriptionInfo"
    GreaterCaveRequest:
      type: object
      properties:
        numberOfTreasures:
          $ref: "#/components/schemas/caveNumberOfTreasures"
      required:
        - numberOfTreasures
    IntFilter:
      type: object
      properties:
        eq:
          type: integer
          format: int32
        gr:
          type: integer
          format: int32
        lw:
          type: integer
          format: int32
    FloatFilter:
      type: object
      properties:
        eq:
          type: number
          format: double
        gr:
          type: number
          format: double
        lw:
          type: number
          format: double
    StringFilter:
      type: object
      properties:
        eq:
          type: string
    DateFilter:
      type: object
      properties:
        eq:
          type: string
          format: date
        gr:
          type: string
          format: date
        lw:
          type: string
          format: date
    BooleanFilter:
      type: object
      properties:
        eq:
          type: boolean
    CoordinatesFilter:
      type: object
      properties:
        x:
          $ref: "#/components/schemas/FloatFilter"
        y:
          $ref: "#/components/schemas/FloatFilter"
    DragonCaveFilter:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/IntFilter"
        numberOfTreasures:
          $ref: "#/components/schemas/FloatFilter"
    DragonFilter:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/IntFilter"
        name:
          $ref: "#/components/schemas/StringFilter"
        coordinates:
          $ref: "#/components/schemas/CoordinatesFilter"
        creationDate:
          $ref: "#/components/schemas/DateFilter"
        age:
          $ref: "#/components/schemas/IntFilter"
        description:
          $ref: "#/components/schemas/StringFilter"
        speaking:
          $ref: "#/components/schemas/BooleanFilter"
        color:
          $ref: "#/components/schemas/StringFilter"
        cave:
          $ref: "#/components/schemas/DragonCaveFilter"
    SearchDragonInfo:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
          minimum: 0
          default: 0
        pageSize:
          type: integer
          format: int32
          minimum: 1
          default: 1
        sortBy:
          type: string
          default: id
        sortOrder:
          type: string
          default: asc
          enum:
            - asc
            - desc
        filter:
          $ref: "#/components/schemas/DragonFilter"
    CreateKillerTeamRequest:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/killerTeamName"
        size:
          $ref: "#/components/schemas/killerTeamSize"
        caveId:
          $ref: "#/components/schemas/caveId"
      required:
        - name
        - size
        - caveId
    UpdateKillerTeamRequest:
      $ref: "#/components/schemas/CreateKillerTeamRequest"
paths:
  /dragons:
    post:
      summary: Create dragon
      operationId: createDragon
      tags:
        - dragons
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateDragonRequest"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DragonDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /dragons:search:
    post:
      summary: Search dragons
      operationId: searchDragons
      tags:
        - dragons
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/SearchDragonInfo"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DragonsList"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /dragons/{id}:
    get:
      summary: Get dragon
      operationId: getDragon
      tags:
        - dragons
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/dragonId"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DragonDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
        404:
          description: NOT FOUND
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    put:
      summary: Update dragon
      operationId: updateDragon
      tags:
        - dragons
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/dragonId"
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/UpdateDragonRequest"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DragonDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
        404:
          description: NOT FOUND
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    delete:
      summary: Delete dragon
      operationId: deleteDragon
      tags:
        - dragons
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/dragonId"
      responses:
        200:
          description: OK
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
        404:
          description: NOT FOUND
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /dragons:groupByDescription:
    post:
      summary: Group dragons by description, return number of dragons in each group
      operationId: groupDragonsByDescription
      tags:
        - dragons
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/GroupByDescriptionResponse"
  /dragons:countByColor:
    post:
      summary: Count dragons with given color
      operationId: countDragonsByColor
      tags:
        - dragons
      parameters:
        - in: query
          name: color
          required: true
          schema:
            $ref: "#/components/schemas/Color"
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/count"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /dragons:countWithGreaterCave:
    post:
      summary: Count dragons with cave greater then given
      operationId: countDragonsWithGreaterCave
      tags:
        - dragons
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/GreaterCaveRequest"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/DragonsList"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /killers:
    post:
      summary: Create killer team
      operationId: createKillerTeam
      tags:
        - killers
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateKillerTeamRequest"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/KillerTeamDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    get:
      summary: Get killer teams
      operationId: getKillerTeams
      tags:
        - killers
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/KillerTeamDtoList"
  /killers/{id}:
    get:
      summary: Get killer team
      operationId: getKillerTeam
      tags:
        - killers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/killerTeamId"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/KillerTeamDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
        404:
          description: NOT FOUND
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    put:
      summary: Update killer team
      operationId: updateKillerTeam
      tags:
        - killers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/killerTeamId"
      requestBody:
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/UpdateKillerTeamRequest"
      responses:
        200:
          description: OK
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/KillerTeamDto"
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
        404:
          description: NOT FOUND
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    delete:
      summary: Delete killer team
      operationId: deleteKillerTeam
      tags:
        - killers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/killerTeamId"
      responses:
        200:
          description: OK
        400:
          description: BAD REQUEST
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
        404:
          description: NOT FOUND
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorObject"
